import groovy.sql.Sql
import org.h2.Driver
import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

buildscript {
    ext.kotlin_version = '1.1.2-4'
    ext.jooq_version = '3.14.12'
    ext.h2_version = '1.4.187'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jooq:jooq-codegen:$jooq_version"
        classpath "com.h2database:h2:$h2_version"
    }
}

apply plugin: 'kotlin'

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

apply plugin: 'maven'
group = 'com.github.sungmin-park'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jooq:jooq:$jooq_version"

    testCompile "com.h2database:h2:$h2_version"
    testCompile 'junit:junit:4.11'
}

def sql = new Sql(new Driver().connect('jdbc:h2:mem:test-jooq-tools', null))
try {
    sql.execute(new File('src/test/resources/db.sql').text)
    //noinspection GrDeprecatedAPIUsage
    def configuration = new Configuration()
    configuration
            .withJdbc(new Jdbc().withUrl('jdbc:h2:mem:test-jooq-tools'))
            .withGenerator(
                    new Generator()
                            .withDatabase(new Database().withInputSchema('PUBLIC'))
                            .withGenerate(new Generate().withImmutablePojos(true))
                            .withTarget(new Target()
                                    .withPackageName('com.github.parksungmin.jooqs.database')
                                    .withDirectory('src/test/java')
                            )
            )
    GenerationTool.main(configuration)
} finally {
    sql.close()
}
